/****
 * @file pushbutton.cpp
 * @version 1.0.0
 * @date August 30, 2023
 * 
 * This file is a portion of the package UserInput, see PushButton.h for details.
 * 
 *****
 * 
 * Copyright (C) 2023 D.L. Ehnebuske
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE. 
 * 
****/
#include <PushButton.h>

/***
 * Constructor
 ***/
PushButton::PushButton(uint8_t inputPin) {
    pin = inputPin;
}

/***
 * begin()
 ***/
void PushButton::begin(uint16_t autoRepeat, uint16_t minClicked, uint16_t minLong) {
    millisForAuto = autoRepeat;
    millisForClick = minClicked;
    millisForLong = minLong;
    closedMillis = 0;
    clickCount = 0;
    longPress = false;
    didLongPress = false;
    pinMode(pin, INPUT_PULLUP);
}

/***
 * clicked()
 ***/
bool PushButton::clicked() {
    updateState();
    if (clickCount > 0) {
        clickCount--;
        return true;
    }
    return false;
}

/***
 * longPressed()
 ***/
bool PushButton::longPressed() {
    updateState();
    if (longPress) {
        longPress= false;
        return true;
    }
    return false;
}

/***
 * updateState()
 ***/
void PushButton::updateState() {
    int curSwState = digitalRead(pin);
    int lastSwState = closedMillis == 0 ? PB_OPEN : PB_CLOSED;
    unsigned long curMillis = millis();

    // If switch just closed
    if (curSwState == PB_CLOSED && lastSwState == PB_OPEN) {
        // For both auto repeat and non autorepeat, when the switch closes note when it happend 
        // (and reset the autoCount and didLongPress used by the autorepeat and non-autorepeat 
        // cases respectively).
        closedMillis = millis();
        autoCount = 0;
        didLongPress = false;
        return;
    }

    if (millisForAuto == 0) {
        //Deal with non-autorepeat case
        if (curSwState == PB_OPEN && lastSwState == PB_CLOSED) {
            // Switch just opened
            if ((curMillis - closedMillis >= millisForClick) && !didLongPress) {
                // and was closed long enough to count as a click and we didn't have a long press
                clickCount++;           // We have a click
            }
            closedMillis = 0;           // Remember switch is no longer closed

        } else if (curSwState == PB_CLOSED) {
            // Switch stayed closed
            if (curMillis - closedMillis > millisForLong && !didLongPress) {
                // and it's been closed long enough for a long press and it hasn't yet been reported
                longPress = true;       // We have a long press
                didLongPress = true;    // And we reported it
            }
        }
        return;
    }

    // Deal with autorepeat case
    if (curSwState == PB_OPEN && lastSwState == PB_CLOSED) {
        // Switch just opened
        if (curMillis - closedMillis >= millisForClick && curMillis - closedMillis < millisForAuto) {
                // and was closed long enough to count as a click but not so long as to be auto clicking
                clickCount++;           // We have a click
        }
        closedMillis = 0;               // Remember switch is no longer closed

    } else if (curSwState == PB_CLOSED) {
        // Switch stayed closed
        if (curMillis - closedMillis >= millisForAuto * (autoCount + 1U)) {
            clickCount++;               // We have a click
            autoCount++;                // And it was generated by autorepeat
        }
    }
}